---
import matcherVimeo from "@astro-community/astro-embed-vimeo/matcher";
import matcherYoutube from "@astro-community/astro-embed-youtube/matcher";
import { INFO } from "@client/lib/config";
import {
  detectMediaKey,
  type MediaKey,
} from "@client/lib/middlewares/rewriters/convert2media";
import { inferImageSize } from "@client/lib/services/image";
import { modifySrc } from "@client/lib/services/media";
import { YouTube, Vimeo } from "astro-embed";
import { Image, getImage } from "astro:assets";
import { css } from "panda/css";
import { styled as p } from "panda/jsx";
import { VideoPlayer } from "./VideoPlayer";

type Props = {
  url: string;
  alt: string;
};

const { url, alt } = Astro.props;
let key: MediaKey | "youtube" | "vimeo" | undefined;
let tmbUrl: string | undefined;

let imgSize: { width: number; height: number } = { height: 0, width: 0 };

const media = async (): Promise<void> => {
  const ext = url.split(".").at(-1);
  if (ext == null) throw new Error(`ext is null: ${url}`);
  imgSize = inferImageSize(modifySrc(url));
  key = detectMediaKey(ext);
};

const youtube = async (): Promise<void> => {
  const id = matcherYoutube(url);
  if (id == null) throw new Error(`youtube match is null: ${url}`);
  const src = `https://i.ytimg.com/vi/${id}/maxresdefault.jpg`;
  tmbUrl = (await getImage({ src, alt, inferSize: true })).src;
  key = "youtube";
};

const vimeo = async (): Promise<void> => {
  const id = matcherVimeo(url);
  if (id == null) throw new Error(`vimeo match is null: ${url}`);
  const res = await fetch(`https://vimeo.com/api/v2/video/${id}.json`);
  const json: Array<{
    thumbnail_large: string;
  }> = await res.json();
  const src = json[0]?.thumbnail_large;
  if (src == null) throw new Error(`vimeo thumbnail is null: ${url}`);
  tmbUrl = (await getImage({ src, alt, inferSize: true })).src;
  key = "vimeo";
};

if (url.startsWith(INFO.site.assets)) {
  await media();
} else if (matcherYoutube(url) != null) {
  await youtube();
} else if (matcherVimeo(url) != null) {
  await vimeo();
} else {
  throw new Error(`unknown url: ${url}`);
}
---

<p.div
  className={css({
    "& > *": {
      maxH: "67.5vh", // タイトルが見える高さ
      aspectRatio: "16 / 9",
      margin: "0 auto",
    },
  })}
>
  {
    (() => {
      switch (key) {
        case "img":
          return (
            <Image
              alt={alt}
              height={imgSize.height}
              src={modifySrc(url)}
              style={{
                width: "auto",
              }}
              width={imgSize.width}
            />
          );
        case "video":
          return <VideoPlayer autoPlay controls muted src={modifySrc(url)} />;
        case "youtube":
          return (
            <YouTube
              id={url}
              params="widget_referrer"
              playlabel="作品を再生する"
              poster={tmbUrl ?? ""}
            />
          );
        case "vimeo":
          return (
            <Vimeo
              id={url}
              params="portrait&title"
              playlabel="作品を再生する"
              poster={tmbUrl ?? ""}
            />
          );
        default:
          throw new Error(`unknown key`);
      }
    })()
  }
</p.div>
